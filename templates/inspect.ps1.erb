$pfx = new-object System.Security.Cryptography.X509Certificates.X509Certificate2

$certificate = gi <%= @location %>\<%= @name %>
switch -regex ($certificate.Extension.ToUpper()) {
    ".CER|.DER" {
        $pfx.import("<%= @location %>\\<%= @name %>","<%= @password %>","Exportable,PersistKeySet")
    }
    ".P7B|.SST" {
        $pfx = new-object System.Security.Cryptography.X509Certificates.X509Certificate2Collection
        $pfx.Import([System.IO.File]::ReadAllBytes("<%= @location %>\\<%= @name %>"))
    }
    ".PFX" {
        $pfx = new-object System.Security.Cryptography.X509Certificates.X509Certificate2Collection
        $pfx.import("<%= @location %>\\<%= @name %>","<%= @password %>","Exportable,PersistKeySet")
    }
}

$installedCerts = @(Get-ChildItem -R cert:\<%= @root_store %>\<%= @store_dir %>)
$installedCertCount = 0

if (($pfx -ne $null) -and ($installedCerts -ne $null)) {
    foreach($cert in $pfx)
    {
        foreach ($installedCert in $installedCerts) {
            if($installedCert.Thumbprint -eq $cert.Thumbprint) {
                $installedCertCount ++
            }
        }
    }

    if ($installedCertCount -eq $pfx.Count) {
        exit 1
    }
    else {
        exit 0
    }
}
else {
    exit 0
}

